// Code generated by go-bindata.
// sources:
// mocks/service.cms.page.bluefoot.mock.json
// mocks/service.cms.page.mock.json
// DO NOT EDIT!

package cmspage

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _serviceCmsPageBluefootMockJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1a\x6b\x6f\xdb\x36\xf0\x7b\x7e\x05\x21\xec\x63\x5d\x59\x76\x1e\x4e\x96\x1a\x58\xdb\x0d\x03\xd6\x62\xc3\x9a\x02\x03\xea\x41\xa0\xc4\xa3\xcc\x58\x26\x05\x91\x56\x62\x14\xfd\xef\x03\x49\xd9\x91\xf5\xb0\x25\xdb\x4d\xeb\xa1\x43\x66\x48\xbc\x27\xef\x8e\xc7\xbb\xab\x3e\x9f\x21\xe4\x30\xe2\xdc\x20\xef\x85\x7d\x04\xae\x18\x65\x90\x3a\x37\xc8\x99\x8a\x39\x38\x66\x5d\x31\x15\x83\x5e\x7a\x1d\x2f\x80\x0a\xa1\xd0\x1d\x48\x65\x61\x09\x8e\xe0\x1d\x5e\x8a\x85\xd2\x08\xb1\x79\xf2\x2c\x68\x0e\x0a\xff\x01\xcb\x07\x91\x12\xa9\x81\x33\xfb\xec\xbd\x40\xf9\xd3\xe0\x09\xef\x2d\xc8\x30\x65\x89\x62\x82\x6b\x54\xbd\x84\x48\x61\xcd\x20\x86\x82\x2b\xe0\xea\x77\xc0\x84\xf1\x48\xe3\xe9\x47\x48\xbd\x0d\xb0\x5e\xd7\xfa\xa1\x37\xef\x3f\x20\xad\x1e\xba\x95\x2a\x15\x3c\x1a\xe7\x08\xb7\x6e\xfe\x9e\x93\xa5\x80\xb5\x8c\x3b\x36\x37\x9b\x94\x2a\xd5\xdc\x0d\x6c\x91\x10\xac\xa0\x0e\x22\x45\xaa\xfe\x4c\x89\x35\x55\x11\x60\x4d\xf0\xd1\x10\xfe\x33\x8f\xcb\xe0\x70\x21\x95\x98\xdf\x4d\xa1\xca\xd2\x82\xfe\x16\x42\xdd\xc1\x3c\x89\xb1\x6a\xc0\x78\xd7\x5a\xc2\x6f\xa9\x98\x6f\x01\xdf\x89\x32\x90\xc9\x5f\x42\xc5\x32\x2d\x58\xa5\x0b\x30\x6b\x41\xee\x74\x1f\x38\x0e\x62\x20\xb5\xb0\x27\xdb\x7f\x3a\x43\x08\xa1\xcf\xe6\x57\xc7\xce\x32\x31\xdb\x48\xc5\x83\x11\x61\x16\xc3\x29\x8b\x49\x0a\x7c\x8d\x5e\x24\xb1\x18\x96\xdf\x5d\x4e\xad\x70\x20\xd7\xe4\x06\x81\x8a\x74\xfe\x16\x2b\xec\xdc\x6c\x10\x22\xe4\xe8\x18\x56\x4b\xdf\xc4\xb5\x73\x3e\xdc\x20\x43\x96\x95\xcf\x14\xcc\x4d\x4c\x56\xc0\x49\x0a\x19\x83\x07\x5f\xff\x54\x78\xef\xe4\xbe\x93\x3f\x42\x0e\x8e\x59\x64\x82\xbc\x0a\x9a\x83\x4a\x59\x58\x0f\x33\x36\xf3\x83\x58\x84\x33\x59\xa3\x58\x59\xf2\xa7\x0a\x1c\xd5\xd0\x18\xba\xa9\xb2\x41\x34\xe1\xab\xa5\x5b\xc2\x32\x14\xc6\x58\xca\x57\x93\xb5\x8f\x7b\x0a\x07\x28\x02\x0e\xbd\xf5\x0a\xc7\x19\x8b\xcc\xe1\x31\x40\x2e\x7a\x40\x98\x42\x6b\xb8\x35\x56\xcf\xec\xb8\x37\x71\xc6\x56\x42\x44\x24\xa1\x91\x24\x11\x95\x24\x9a\xf0\x5b\x97\xb0\x6c\x3c\xe1\x8d\x42\x7b\x79\x30\xac\x19\xdc\x26\x63\x42\x23\x22\xf3\x3f\x2a\xc9\xad\x9b\x8c\x9f\x38\x99\x5d\xd5\xec\xf5\x4b\xd9\xa8\xdf\x91\x51\x88\xd4\x3b\xa2\x87\xda\x83\x46\xa7\x6f\x0a\x49\xac\x29\x24\xd9\xcf\x18\x48\xaa\x65\x0c\xaf\x26\x8e\x82\x47\x65\x99\xdf\xa0\x18\xa8\xfa\x79\xe2\x18\x43\x51\x13\x36\x2d\x0d\x55\x59\xfb\xf7\x6c\x1b\x46\xc9\xb0\x8d\xa7\xbd\x78\xd6\xcf\x1a\xc8\x8b\x79\xf2\xf3\x96\x2c\x56\x3e\xeb\x35\xb9\xa1\x26\x9f\x1a\xf2\x4a\x9e\xd9\x96\x5a\x73\xf8\x66\x0a\x3c\xaf\x61\x51\xac\x19\x36\x4e\x7b\x03\x2e\x3c\x2a\x9c\x82\x16\xe8\xd4\x9f\xed\x7a\xba\x1d\xb9\xba\x83\xba\xdd\x14\xde\x5f\xe5\xad\xe9\x3f\x47\xa8\x0f\x8c\xd5\x7f\xb5\x07\x77\x07\xd3\xad\x2c\xcb\x01\x5e\x11\xf0\xac\xd1\x74\xb1\x23\x9a\x56\x69\xb2\x53\x20\xd9\xa4\x78\xbc\x18\xaa\x57\xb2\xb5\x9a\x7b\x29\xfa\x23\x72\x2a\xf0\x4d\xa7\x5c\xee\x88\x9c\xa7\x5b\xa5\x4d\xec\x74\xb8\x43\x8e\x17\x57\xf5\x5b\xe8\xb0\x89\xa3\x6f\xe3\x14\xa2\x6e\xe3\xbd\x78\x39\x3f\x41\x0a\x4a\x6c\xeb\x32\x4c\xa1\xb3\x4f\x97\x31\xac\xb4\x11\xab\x9a\x09\x4b\x62\xff\x0e\xea\x33\x2a\xfc\x5b\x48\x68\xdd\x69\x1c\xb5\x7c\xe9\x6a\x72\x92\xb2\x0c\x52\xe7\xd9\x3c\x75\xee\x35\x79\xca\x9c\x2c\x7d\x7d\xd3\x3c\x15\xcb\xc3\x5a\xc3\xb2\xa0\x2e\xa2\x4e\xc3\x77\xeb\x54\xb3\x97\x23\x06\x95\xc6\x7c\xf3\x4e\x94\x84\x4a\x22\x29\x91\x01\xa1\x88\x06\x28\x23\x92\xca\x88\x92\x80\x06\x04\x45\x94\x44\x44\x66\x01\x22\x32\x43\x59\x86\x68\x90\x49\x8a\x28\x09\x02\x40\x11\x85\x80\x52\xc8\xe8\x43\x4d\x5a\xeb\xe8\xc4\xb2\x92\xcf\xa5\xe6\x69\x04\x00\xe6\xe1\x54\xa4\xfb\xb9\xff\xaa\xac\x93\x65\x96\x83\x89\x36\x5c\xb9\x7a\xea\xe8\xbb\xb2\x84\x56\x32\x4e\xc3\xf0\x12\x70\x1a\x4e\xf7\x33\xfc\xa8\x62\xd5\x18\x87\x30\x15\xf1\x6a\x96\x49\x2a\x65\x6b\x47\xc3\x97\x25\xb4\x92\x71\x1a\x86\x3f\x28\xe5\x0d\xcb\xbd\x67\x39\x97\x60\x2c\xb1\x3c\x38\x69\x55\xc4\xb4\x17\x74\x1a\x4e\x08\x16\x4a\x09\xbe\xdf\x3c\x78\x58\xee\xdd\x72\x6e\x4f\x13\xdb\x4a\x81\xd0\xcd\xf8\xd5\xde\x70\xa7\x84\xaf\x39\x13\x2e\xc9\x3e\x6c\x2a\x6c\x99\x21\xb5\x4c\x74\x4b\x61\xdf\x26\xce\x7a\x2c\xb7\x39\xfb\x33\x5a\xf5\x56\x48\x63\x6c\xbb\x5b\xfb\x7e\x7a\xf3\xb6\x1d\x76\xdc\xdd\xe9\x16\x18\x1c\xdc\xeb\x0e\x1b\x7a\xdd\x98\xf1\x99\xaf\x8f\xba\xb9\x9c\x9b\xc7\x24\x06\x6f\x91\xc6\xb6\x92\x56\xc9\x8d\xeb\xce\x71\x04\x5c\x89\x1e\x81\xac\x87\x67\xb1\xcb\x38\x81\xc7\x97\xc9\x34\x71\x31\x99\x33\x9e\xff\x86\x73\xe9\x27\x38\x02\x17\x08\x53\xae\x7e\xf2\x19\x71\x07\xee\x0c\x96\xee\x10\x2e\xc9\xa5\x17\x5c\x90\x01\x0c\xae\x2f\x3d\xec\x85\x70\x35\x82\x8b\xd1\x95\x77\x3d\xc0\xf4\xba\xef\xf5\x43\x6f\x44\x83\xfe\xe8\xda\x0b\x03\x1c\xe2\xab\xe1\xd5\xe0\x1c\xf7\xf1\xf0\x6a\x34\x1c\x05\xa3\xc0\x3d\x5a\x1f\xdd\x60\x9e\xf6\x06\x3a\x2d\x13\xfd\x5f\x7a\xf4\xb3\x22\x34\x57\xe9\xc8\xff\x8c\x48\x01\xab\x45\x0a\xc4\x4f\x52\x41\x16\xa1\xda\xef\x0a\xa9\x94\xae\x1b\xe3\x99\xe9\x7d\x19\x1c\xe3\x00\x56\xad\x3a\x8d\xa6\x15\x70\x31\x28\x75\x49\x4a\x68\x44\x2b\xcd\xe7\x49\x04\xa4\x93\xdb\x35\xb7\x54\xe5\x2a\x65\x5a\x65\x0d\x71\xb9\xcb\x5c\xce\x42\x11\xe3\xde\xbd\xe0\x20\x7b\x83\x91\x77\x7e\x3d\xf2\xbd\x97\xf7\x49\xa5\xfc\x2c\x55\x2f\x54\x92\x68\x7a\x3f\x9b\x92\x88\x1e\xa1\x5a\xaa\x69\x13\xb6\xfb\x73\xa7\x47\xdb\xfa\xf4\x54\xbc\x5a\xf6\x6b\xcd\x65\xc7\xb1\xfd\x9c\x61\x5a\x97\x50\x1d\x39\x5b\x34\x03\xd7\x31\xd1\xb0\xff\x64\x11\xb8\x52\x61\xc5\x42\x37\x83\x54\x32\xc1\xbd\x8b\xbe\x77\xd1\x1f\xf5\xcf\x87\xd6\x18\xba\x52\x71\xdf\x5b\x32\x37\xc0\xe1\x0c\x38\x71\x81\xfb\x1f\x3f\xac\x56\xfd\x37\x58\xe1\x58\x44\xae\x11\x26\xdd\x7c\x3b\x6e\xa1\x2d\xb1\xa0\x9a\xe8\xcb\xf7\xcf\x42\xa3\xe4\x4f\xde\xe0\x65\xbf\x5f\xce\x78\x95\x04\xba\x67\xa4\x77\x8e\xf5\xd3\x28\xd8\x43\x41\x60\xbf\x66\xf5\xba\x69\x5a\x27\x31\xa1\xe6\x7f\x42\xf1\x61\xdd\x6a\x59\x44\x3b\x21\xdf\xda\xf0\xcf\x70\x59\xda\x43\x67\xbb\x8b\xfd\x2e\xca\xca\xa8\xc1\xf0\x6a\xba\x1c\xba\xa5\xed\x9a\x21\x43\x81\x7b\xdd\xd7\x31\xab\xa4\x9e\xe7\x02\xf4\x6b\x06\x5c\x49\xf4\x8e\x49\x05\x69\x6d\x66\xda\xf8\x1c\x2e\xb4\x64\x3e\x18\x32\x3f\x6e\x24\x2b\x7c\x86\xb6\xf1\xd5\xc2\x66\x7b\x94\x63\xf5\x0a\x29\x68\xe2\x8c\xff\xc2\x11\xa0\xd7\x0b\xa6\x5f\xd1\x9b\xd5\xe7\x6a\x84\x65\xe3\xdd\x29\xe7\x04\x12\xc1\x41\x65\x57\x25\x17\xec\x28\x36\x56\x60\xc2\x64\x12\xe3\xa5\xc6\x19\x1c\x18\x74\x35\xb9\xe2\xc7\xcd\xd8\xf1\x66\xac\x71\x8b\x3e\x82\xdf\x59\x7e\xfd\xfa\x73\xd8\xfe\x8e\x39\x2c\x3e\x7c\x10\x5b\x16\xd1\x4e\xc8\xb7\x36\x7d\xab\xab\x0d\x1e\x55\xfa\x74\x27\x3b\x04\x62\x50\xe6\xd3\xd4\x4f\x39\xdd\x99\xe6\xf0\xe5\xec\xbf\x00\x00\x00\xff\xff\x33\xb3\xe8\x7d\xe3\x2c\x00\x00")

func serviceCmsPageBluefootMockJsonBytes() ([]byte, error) {
	return bindataRead(
		_serviceCmsPageBluefootMockJson,
		"service.cms.page.bluefoot.mock.json",
	)
}

func serviceCmsPageBluefootMockJson() (*asset, error) {
	bytes, err := serviceCmsPageBluefootMockJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service.cms.page.bluefoot.mock.json", size: 11491, mode: os.FileMode(420), modTime: time.Unix(1502693885, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _serviceCmsPageMockJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x4f\x4b\x03\x31\x10\xc5\xef\xfd\x14\xc3\x9e\x0b\xb2\x1e\x4b\x11\x44\x11\xc1\x8a\xa2\x11\xbc\x86\xcd\xb8\x1d\xdc\x64\x96\xc9\xac\x52\xc4\xef\x2e\x93\x2c\x58\xeb\x1f\xbc\xbd\xbc\xdf\x9b\x3f\x99\xb7\x05\x40\x43\xa1\x59\x41\xbb\xac\x12\x93\xd2\x13\xa1\x34\x2b\x68\xb6\x1c\xb1\x29\xbe\x92\x0e\x68\xd6\xd9\xf5\x3d\xdc\xfa\x1e\xc1\x61\xd6\xca\x46\xdf\xe3\xc6\xef\x78\x52\x0b\x0c\x45\xb5\x15\x45\x54\x7f\x85\xbb\x57\x96\x90\x0d\x3e\x57\xdd\x2e\x61\x56\xc7\x9f\xb9\x73\xcc\x9d\xd0\xa8\xc4\xc9\xa2\x66\x41\xd8\xf3\x4a\xb0\xe3\xa4\x98\xf4\x12\x7d\xa0\xd4\x5b\xce\x24\x4a\xfb\x05\x9b\x6f\xfb\x81\x6d\x6b\xeb\xc1\x3a\xab\x70\xea\x4f\xe6\xc0\xfa\x68\x7e\xcf\x65\x82\xde\x66\x38\x8a\xe5\x93\x59\xc5\xba\x17\x36\x8d\xc1\x2b\xfe\x44\x32\x8b\xde\x48\xa8\xa7\xda\x07\xf5\x04\x0f\xa5\xf0\x31\x0e\x87\xb8\x9b\xb2\x72\x74\x5b\xfc\xde\xb2\xa2\x3b\x66\x75\x18\xc7\xc1\xeb\x2f\x89\xcd\xbf\x27\x5c\x08\xc7\x3f\xb0\xe3\x43\x48\xf9\xb4\x53\x7a\xb1\xc1\x2a\x13\x2e\xde\x17\x1f\x01\x00\x00\xff\xff\x81\x95\x4a\xd1\x24\x02\x00\x00")

func serviceCmsPageMockJsonBytes() ([]byte, error) {
	return bindataRead(
		_serviceCmsPageMockJson,
		"service.cms.page.mock.json",
	)
}

func serviceCmsPageMockJson() (*asset, error) {
	bytes, err := serviceCmsPageMockJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service.cms.page.mock.json", size: 548, mode: os.FileMode(420), modTime: time.Unix(1502693885, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"service.cms.page.bluefoot.mock.json": serviceCmsPageBluefootMockJson,
	"service.cms.page.mock.json":          serviceCmsPageMockJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"service.cms.page.bluefoot.mock.json": &bintree{serviceCmsPageBluefootMockJson, map[string]*bintree{}},
	"service.cms.page.mock.json":          &bintree{serviceCmsPageMockJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
