// Code generated by go-bindata.
// sources:
// mocks/searchResult.mock.json
// DO NOT EDIT!

package search

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _searchresultMockJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3d\xdb\x6e\x1b\x39\x96\xef\xf9\x0a\xae\x80\xc5\x3e\xac\x2f\x55\x25\x4b\xb2\xfc\xb4\xb6\xbb\x33\xed\x99\x24\x9b\x69\xbb\xb3\x8d\x1e\x04\x01\x55\x75\x24\x71\xc4\x22\xd5\x24\xcb\x8e\x66\x11\x60\x7f\x63\x3f\x61\xbe\xa3\xff\x64\xbf\x64\xc1\xba\x48\xa5\x2a\xd6\xcd\x96\x63\x5b\xe6\x60\x80\x96\xc9\x73\x4e\x91\x87\x3c\x77\x92\xf9\xef\x37\x08\xf5\x7e\x8f\x40\xac\x7a\x67\xa8\x87\x29\xed\x1d\xe8\x16\xb5\x5a\x82\x6e\x58\x0a\x1e\x44\xbe\x4a\x1a\x05\xc8\x88\x2a\xd9\x3b\x43\x1a\x2b\x6e\x50\x98\x50\x10\xeb\x16\x84\x7a\x21\x28\xfc\x03\x56\x38\xd7\xa6\xe9\x71\x85\xe9\x4f\x24\x46\x76\x0e\xf2\xed\x7c\xd1\x3b\x43\x5e\xae\xc9\x8f\x84\x00\xa6\xfe\x5a\x1c\x53\xda\x3d\xc5\x3e\xa8\xf7\x78\xb9\x24\x6c\xd6\x3b\x43\x7f\x5b\xf7\xa0\xdc\xf7\x62\xc8\x80\xfb\x51\x08\x4c\xdd\xa4\x73\x59\x8f\xf6\x60\x1b\x2e\xa6\xf8\x01\x87\xa0\x07\xf7\xb7\xcf\xb9\xce\x6f\x07\xed\xa9\x53\xee\x63\x45\x38\x7b\x1c\xea\x13\x81\x59\xf0\x38\xa4\xf3\x4b\xdc\x8e\xf8\xfa\xf7\xe7\xdc\xba\x48\x2e\x76\xbb\x2c\x9a\x60\xbc\xd7\xbe\xed\x78\x45\x1e\x4c\xd8\xb8\x18\x0f\xa6\x5a\xb1\x0e\x66\xba\x9b\x25\x78\x53\xf8\x52\xb2\x70\xc9\xa2\x6d\xda\x08\x55\x20\x0a\x8d\x4b\x3c\x83\x2b\x36\xe5\xdb\x92\x9a\x8a\xdf\x47\x3c\xd3\xa3\x72\x0f\x0a\x32\xac\xdb\x8b\x42\x7c\x4b\x24\x99\x50\xd0\x5d\xef\x08\x5b\xe8\xee\x41\xae\x7b\x89\x83\x20\xd9\x15\x6e\x69\xb0\x73\xa2\x72\xfb\x2b\x6d\xdf\xac\x5c\x27\xbd\xd2\x2f\xeb\x95\xbe\xd5\x2b\x56\xaf\x58\xbd\xf2\x82\xf4\x8a\xbb\x5b\xbd\xf2\xc6\xc4\xa4\x35\x8b\xb6\x46\x98\x4c\x88\x0b\x20\x33\x76\x15\xe4\x17\xfa\x10\x53\xaa\x78\x24\xe4\xa1\x7b\x08\xec\xcb\x2f\xd7\x45\x5e\x6a\x40\x1a\x33\x1b\xd8\x97\x0f\xbf\x15\xbb\xfd\x39\x66\x0c\xa8\xee\x0f\x31\x61\x52\x71\x01\x25\x18\x1e\xc4\x04\xe6\x40\x18\x84\x98\xb1\x43\x05\x22\x24\x0c\xd3\x43\xf7\x10\x0b\xc0\x87\xff\x38\x64\x9c\x1d\x4a\x7f\x0e\x6c\x06\x65\x75\xc0\x45\x88\xd5\x27\x10\x32\xd1\x9b\x6e\xa1\x5f\x11\x95\x8c\xf0\x3c\x9d\x4b\x69\x3f\xcc\xb9\x50\x37\x19\xd4\xb5\xfe\x0b\xc5\x48\xa8\x16\xe3\x07\x90\xbe\x20\xcb\x54\x5b\xa7\x78\xc1\xa6\xb1\x12\x3b\xd8\x46\xfc\xa1\x05\x4a\xe6\x94\x5e\xcf\xf9\xb2\xd8\x87\x89\x58\x72\xa1\x7e\xe3\x0c\x4a\xab\xba\x35\xfd\x04\x0e\x69\xc0\xaa\x0f\x69\x72\x02\xb4\xa5\xe9\x5d\x96\xbb\x28\xdc\x26\x6b\xd9\x2f\xf7\x65\x6b\xa6\xbb\x6f\x5c\x03\x2e\x66\x81\x24\xf1\x4a\x2b\x11\x41\xa9\x7f\xbd\xba\x67\x68\x8a\xa9\x84\xad\xfe\x6f\x85\x29\xc7\xea\x42\x16\x94\x62\xdc\xf3\x67\x12\xa2\x0b\xc0\x61\x79\x00\x3f\x45\x33\x8e\x2e\xb8\x34\x4c\xf9\x86\xd0\xe2\xae\x44\xa8\xf7\x1b\x61\x3e\x7a\x4b\x57\x0a\x7a\x5b\x5d\x9f\x0b\x83\x09\x21\x20\xd8\x30\x96\xe2\x4a\x68\x50\x12\x42\xa6\x9c\x48\x88\x67\x70\xfc\xf7\xe5\xac\xf4\xe5\x38\xbc\x98\x82\x00\xe6\xc7\x90\xf1\x07\x8e\x63\x78\x79\x1c\x4f\xfd\x78\x0e\x82\x5f\xe8\x5f\x5f\x62\xb1\xfb\x72\x32\x72\xdd\xa3\x0a\x5a\xeb\x0d\xf0\x56\x70\xa6\x30\x45\x9f\x08\xdc\x21\x3e\x45\x6a\x0e\xc8\xa4\x78\x51\x7e\xc7\xc5\x9f\x3d\xc4\x4b\x62\x02\x8a\x64\xa2\xd3\x7a\x6a\x1e\x85\x13\x86\x09\xed\x15\x80\xbe\xd5\xb2\xce\xe7\x11\x53\x71\x10\xd5\xbb\xe6\x21\xa8\xb9\x56\x6a\x05\x18\x08\x35\x59\x3d\x12\x36\xe5\xff\xb1\x56\x12\x47\x41\x49\x91\x2c\xe7\x89\x08\xf4\xfe\xfd\x64\x5c\xea\x23\xfe\x22\x5a\x1a\x37\x5f\x6f\x01\xab\x3b\x2e\xcc\xfb\x69\xce\x55\x61\xf5\xab\x6c\x51\x6f\x4e\x66\x73\x4a\x66\xf3\xa2\x6d\xc9\x41\x3d\x54\x15\x1f\x32\xb2\x5c\xea\x9f\x44\xdc\xe1\x95\xdc\x0b\x95\x8c\x3e\xc4\x73\x42\xe7\xc9\x9c\x3a\x29\xe7\x36\xb8\x6d\xd4\x74\x03\x9d\x7a\x85\xdd\x80\xfc\x18\xaa\xbb\xfe\x93\x39\x25\x7e\x51\xa3\xc4\xbd\x67\xab\xc4\x2f\x80\xde\x42\x00\xa5\x7d\xa9\x55\x35\xa6\x44\x2e\x40\x58\x95\x6c\x55\xf2\x7a\x0a\x4f\xa6\x92\x65\xa8\x95\xf2\x92\x62\x06\x4a\x2b\x65\x4a\x18\xec\x81\x56\xbe\xd6\xd3\x42\x1f\xe3\x69\x69\x1d\x13\x4f\xab\xbd\x62\x6e\x8f\xde\xa8\x9b\x5b\x91\xaa\x51\xcf\xad\xf0\x77\xae\xa1\xdb\x7c\x35\xa7\xa4\x7f\x78\x80\x92\x36\xf4\x7f\x27\x25\xfd\x9e\x50\x0a\x02\xfd\x84\x85\x20\x86\xc9\xfd\x85\xb0\xc0\xe4\x55\xff\x28\xd5\x1f\xff\x04\xf4\x0e\x47\x41\x29\x41\x81\x50\xef\x12\x87\x4b\x2c\xca\x9a\xad\xf7\x23\x25\x80\xae\x31\x9e\x58\xcd\x6f\x35\xff\x7a\x0a\xdd\x35\xff\x9b\x3c\x66\x96\x75\x4d\x18\xdf\x29\xe5\x3a\x28\xa7\x5c\x4f\x6c\xca\xb5\x9e\xba\x4d\xb9\x76\x9f\x98\x4d\xb9\xee\x6f\xca\xb5\x8d\xd3\xb7\xe5\x78\x9e\x04\x23\x67\x3c\xf0\xa7\x23\x0c\xa7\x18\xf0\xe9\x60\x34\x1e\x0c\xdd\xe1\xc8\x19\x8d\xe0\x64\x34\x80\xd4\x00\xbd\xc7\x42\xce\xb7\x35\x0e\x6a\xe3\x00\x76\xd3\xbd\xdd\x1c\x5c\x6b\x98\xef\x6d\x98\xdb\xb9\xca\x55\x8b\x5e\xed\xa7\x57\x61\x28\xc0\x32\xf1\x03\x6e\xe2\x5f\xd5\x80\x19\xd5\x35\xc0\x77\x88\xc4\x3a\x0b\x8d\x0b\xe0\xf5\x87\x43\xc7\xf7\xdc\xc9\xe4\xd4\x9d\x80\xdf\x77\x27\x30\x9c\x02\xf4\x3d\x18\x07\x99\xd0\xdc\xcc\xe1\x3d\xf6\x31\xa5\xb8\x73\xe0\x64\xe5\xe6\x05\xcb\xcd\xcd\x5c\x4b\x82\x79\xe1\xab\x65\xa7\x0e\xab\x24\x3f\xb5\xc0\x19\xf5\x2d\xa0\xe7\x28\x47\xfd\x3e\x9c\x4c\x07\xd3\xfe\xd4\x75\x1d\x2d\x48\xa3\x61\x80\x7d\xec\xf7\x9d\xc9\x38\xf0\x4e\xc7\xd3\x74\xb3\xfc\x49\x00\x30\x4c\x69\x29\xcc\xb6\x52\xb4\xc7\x52\x54\xb9\xea\xd5\x22\x54\x89\x52\x92\x9f\x6a\xc8\x8c\xee\x06\xe2\x39\x4a\xce\x70\xe0\x0c\xc6\x13\x0c\xa3\x13\x67\x3c\x81\xe9\xa9\x17\x8c\xdc\x81\x37\x72\xa7\x18\x0f\x07\xc3\x71\x3f\xdd\x20\x17\xb1\xec\x2b\x53\x8a\xca\xca\xce\x1e\xcb\xce\x66\xdd\xff\xad\x83\xf8\xd4\x61\x95\x24\xa8\x16\x38\xa3\xbe\x05\xf4\x1c\xe5\xe8\xd4\xf7\x9d\x13\xcf\x1b\xfb\x81\x3f\xc1\xfe\xd4\x71\x5c\xed\xd1\x8d\x4f\x83\x21\x1e\x9f\x0c\x46\x5e\xba\x59\x7e\xe6\x13\x10\x8a\x5f\xe2\x5b\x4c\x69\x71\x5d\xad\x28\xed\xb3\x28\xa5\x4b\x8f\x2a\xd6\xbe\x5a\x9a\x1a\x10\x4b\x02\xd5\x04\x9f\x7d\xa3\x08\xd7\x5d\xac\xd2\x5f\xdb\x09\xcb\x2c\xcd\xd2\x29\x65\xe9\xb9\x27\x36\x69\xd9\x99\xba\x4d\x5a\x76\x9f\x98\x4d\x5a\x3e\x62\xd2\xd2\x1b\x3c\x6d\xd6\xb2\x7d\x25\x9b\xb3\xb8\xf2\xd9\x9c\xa1\x71\x01\x7b\xce\xa9\xeb\x8e\xb1\x3f\xc4\x03\x0f\x0f\xbc\xc1\x70\xd0\x3f\x99\x4e\xc6\x03\x6f\x34\xf1\x53\xcb\x55\x43\x2e\xc4\x62\x01\xea\x23\xc5\x3e\x5c\xa6\x55\xf2\x26\xa2\xa5\xa2\x54\xb2\x09\xb2\x3d\x21\x49\xb8\x2c\xd5\x2f\x1b\x9d\x07\xa9\xb8\xbf\x78\x97\x15\x6f\xb5\x4e\x2f\x52\x20\x4c\x81\x60\x98\x6a\xf9\xd6\x30\x97\xef\xae\x3e\x5c\xfd\xf5\x97\x1f\xe3\x63\x3d\xe7\x13\x1e\x29\xf4\x9e\x13\xa9\xa2\xf2\x24\xd3\x11\xbe\xc5\x21\xa1\xab\xdc\xbe\x45\xd3\xa4\xa5\xb8\x10\x02\xb0\x82\xe0\x5c\xc5\x75\x64\xc7\x1d\x1c\x3a\xee\xa1\xe3\xde\xb8\xde\x99\xeb\x9c\xf5\x9d\xd2\xca\x45\xcb\xa0\x1b\x42\xba\xf9\xde\x0a\x1e\x96\x51\x9c\x61\x0d\xca\x0d\x4f\x10\x3c\xa7\xe9\x1b\x7e\x24\x15\x0f\x41\xfc\x8c\x55\xb2\x91\x07\x46\xd3\x5c\xb2\x7c\x59\x6f\x66\x88\xdb\xf3\xb9\xe4\x27\x74\x42\xdd\x78\x0a\xdd\xbf\x58\x70\x6f\x6e\xe6\x80\x18\xdc\xa1\x4b\x4a\x18\xf9\x3d\x02\x03\x21\xa4\x04\xbe\x05\x8a\x12\x4d\x8e\xe0\xab\x4f\x23\x49\x6e\x01\x49\x50\x88\x30\x9f\x46\x01\x48\x04\xb7\x20\x56\x71\x3d\x17\xad\x78\x84\x18\x40\x80\x14\x47\x0b\x80\x25\x92\x0b\xc2\xd0\x7c\x15\x08\xbd\xf4\x08\xb3\x00\xf9\x3c\x9c\x72\xa1\xf0\x84\x02\x9a\x72\x81\xa2\xa5\x06\xf6\x4e\xd0\x9c\x47\x42\x1e\x21\xf4\x8e\x2c\x00\x61\x4a\x37\x03\x4b\x37\xa2\x3c\x88\x1d\xc5\xf5\xe0\xae\x23\x31\x03\x24\x30\x9b\x01\x22\x52\xa3\x80\x98\xad\x90\x02\x99\x7d\xcb\x75\x9c\x7f\x45\x53\x81\x67\x02\x33\x1f\xd0\x54\x00\x1c\x95\x99\x53\xe5\x36\x9b\x1c\xe7\x96\xfe\x68\x07\x0f\xdb\xec\xbc\x1a\xe1\x36\xc9\xbc\xc4\x4b\x0c\xb0\xc2\x28\x1e\x7d\xe2\x66\x9a\xb1\xaa\x3d\x78\x9f\xb3\x29\x99\x45\x42\xaf\xc5\x97\x94\xc9\xb1\xef\x5e\x22\xf3\xad\xd0\xf2\x79\xeb\xef\xe2\xa9\x0e\x6d\xd9\x12\x69\x2a\x09\xcc\x52\x90\x78\x20\xae\x77\xd4\xf7\xc6\xfa\x7f\x5e\x7f\xe4\x0c\x9d\xc1\xa0\xbc\x67\x81\x52\xc2\x66\x97\x3c\x8a\xcd\x84\xeb\x38\xb5\x1f\xf5\xb1\x82\x19\x17\xab\x8f\x58\xcd\xcd\xa7\xfe\x70\xa4\x8a\x5a\x6c\xdd\x7e\x7c\xbd\x20\xcc\xc7\x26\xd9\x29\x00\x1c\xdf\x24\x32\x71\x0d\x0d\xc1\x5a\x36\x20\x6d\x31\x8c\xe1\x9e\xcf\x03\x30\x9c\x82\xd4\xcd\x5e\x3d\xe9\xcc\x7a\x5e\x70\x2e\xd5\xf6\x9d\x31\x64\xf0\xf6\x3b\x84\xa0\x69\x5f\xfd\xe7\x33\x02\x57\xe1\x52\x4b\x72\xbc\x3c\x2c\xa2\xb4\xc8\x80\xdc\xf6\xfa\x58\x8a\x28\xd6\x60\x45\x93\x65\x50\x7a\xd9\xbe\x37\x30\x2b\x6f\x85\x1c\x27\xd6\xf6\x5a\xe1\x3b\xce\x59\xfc\xff\xa2\xc2\x2f\xda\xa1\x76\x28\x58\x29\x41\x26\x91\x8a\xd7\xb1\x3c\xd3\x9c\x0e\xd1\x9d\xb5\xdb\xf4\x16\x0b\x82\x99\xfa\xa4\xff\xa3\x35\xf1\x79\x3d\xe9\x0c\xde\xb4\x58\x86\xb0\xbe\xc8\xcb\x4f\x09\x36\xca\xda\x11\xd3\x1d\x75\xa1\x79\x17\xb3\x72\x0f\x2f\xa0\xbc\x02\x6d\x91\x88\xbc\xc6\x14\xf4\x5e\xaa\x38\x79\xa6\x55\x46\x0a\x91\xb9\x0c\xad\x56\x37\x87\x97\xf8\x0d\x6d\xb1\xb6\x76\x85\xd1\x54\x24\x26\x09\x98\xcc\xaf\xc5\x1a\x0d\x6d\xba\x8d\x8a\x3b\x8e\x46\x52\x7f\xd3\xb4\xe9\x36\x40\x6b\x6f\x2f\xb5\x98\x66\x7a\x3e\xa7\x5c\x18\xed\x5c\xdc\xbd\x02\x4a\xf9\x5d\x59\xf7\x97\xe4\x3f\x85\x5f\x62\x7f\x81\x67\x70\x4d\xfe\x01\xe6\xe9\xa5\x00\x48\x6a\x08\x23\x09\x99\xe0\x56\x0c\xe8\xd7\xe2\x29\xd7\x75\xcf\xbb\xaa\x8e\x5f\xdf\xb5\x1f\xbf\xf6\xf4\xf1\x0c\x2e\x39\x0b\x88\x96\xc4\x8a\x45\x4a\xc1\x90\xbf\x81\x33\x1b\x67\x3c\x33\x09\x69\xda\x5b\xa6\xab\xb0\xc1\xce\x16\x2d\x2b\x2a\x6b\x10\x64\xfd\xb9\x7a\x7f\xae\x7c\x64\xd7\x72\x66\xcd\x99\x52\xbc\xe3\x18\x80\xaa\x1d\x62\xb3\x4b\xdc\xda\x29\xee\xe4\x16\xe7\x1d\xe3\x20\x5e\x96\x2a\xb0\xb5\xf1\xca\xa4\xac\xc9\x27\xae\xf7\x8a\xf1\x2d\xc1\xe2\x38\x35\xbc\x9e\xd9\x21\x36\x8a\x65\x4b\xee\xc0\xd7\xc4\x18\xbf\x28\x16\xcd\x95\x5a\xca\xb3\xe3\x63\xcc\xe1\xc8\xe7\xe1\xf1\x55\xf8\x5b\xff\xea\xef\xdc\xfb\x70\x33\x1f\xef\x92\x45\x2b\x1e\xa9\x68\x52\x39\xa6\x3c\x6f\x9e\x0b\x4b\xe2\x21\x1f\x4d\xe0\xf8\x6e\xb4\xfa\xf4\xeb\x9f\x4e\xd4\xf0\x83\x99\x1d\xa5\x36\x83\x61\xda\x41\xae\x29\x1d\x69\x92\x7c\xbd\x5e\x44\xf9\x39\x66\xcd\x48\x2e\xa2\x3a\xb4\xec\xd3\x25\xbc\xf8\x96\x48\x0d\x62\xd1\xf3\x5c\x23\x56\x79\x9e\x19\xc0\x55\x98\xae\x9a\x09\x88\x0b\x32\x23\xec\x63\x1a\x3c\x8e\x46\xfd\x4a\x98\x0b\x2c\x21\x83\xeb\x8f\xfb\x47\xc3\x66\xc8\x5f\x18\x89\x3d\x51\x63\xcd\xaa\x00\x7b\x1e\x56\x84\xa3\xa5\x02\x53\xee\xaf\xc7\xaa\x70\xee\xe0\xd2\xcf\x7d\x12\xa5\x95\xc4\x76\x9f\x26\xcd\x87\x90\xcf\x3b\x59\xfa\xd1\x26\x4b\x6d\xb2\x74\xff\x5d\x48\x9b\x2c\xb5\xc9\x52\x9b\x2c\xdd\xee\x7b\xca\x64\x69\x37\x7d\x78\x2f\x2d\xda\x3d\xc5\x57\xb4\x5e\x8d\x96\xa5\x39\x99\xb6\x9d\x4a\xbb\xcc\x31\x2b\x53\x78\x2d\xf3\x6a\x5b\x59\xb5\x26\x42\x31\x6c\xa5\xcb\xdb\x36\xf5\x56\xcc\x94\x19\x3f\xda\x90\x2c\x33\x67\xab\x1a\x86\xdf\x2a\x75\x55\x97\xb8\x6a\xfa\x80\x31\x87\x55\xcc\x60\x95\xa2\xc0\x17\x68\x43\x8c\x7c\xc8\x19\x13\x54\x56\x4d\x68\x67\xe6\xa4\x4c\xf9\x7b\xb3\xa9\x26\x90\xee\xc0\xa3\xf2\x65\xf2\x27\xe3\x51\x5d\x96\xa1\x39\xc7\xb0\x6b\xc6\x94\xdf\xbb\x2a\x33\xa6\x5b\xb2\xa1\x9b\x0b\x52\x5b\x93\x2a\x59\xbd\xac\x22\x75\xb4\x51\xd9\x47\x46\xad\x65\x84\x4c\x8a\x10\xb5\x16\x73\x27\x25\xaf\x2f\xce\xeb\x29\x73\x15\x82\xbd\x41\x15\xed\xed\x32\x57\x2b\xbb\x7c\xff\x32\x97\x6b\x30\xc8\xcd\x75\x2e\x23\x7a\xad\x19\xde\x69\x0d\x6c\x49\xd8\xa2\x32\xf5\x88\x67\xc0\x14\xae\xea\xde\x51\xf9\xcc\xfd\x2e\x05\xb4\xd3\x61\x55\xcf\xd8\xac\xa5\x11\xea\x55\x12\xdb\x59\xd1\xcd\xad\xf3\x5d\x1e\x52\x75\x73\x6d\xdd\xcd\xd6\xdd\x6c\xdd\xed\xd1\x8b\x4a\x6e\x0b\x9f\xb8\x43\xed\xcd\xdd\xd3\xda\x9b\x5b\xeb\x10\x37\x55\xde\x9e\xbc\xee\x76\x4b\x02\xe0\x8f\xc5\x13\xb3\x2f\xbc\x0f\xa5\x37\xf7\xde\xc5\x37\xf7\xfe\xe5\x37\xf7\x51\x0a\x70\xe3\x72\x06\xb2\xb2\x00\xd7\x6f\x51\xab\xbb\x6f\x05\xce\x64\xa1\x97\xe0\x13\x4c\xb3\x11\xb8\xce\xe0\x68\x3c\x6e\x80\x4b\xfd\x68\xd7\x71\x9a\x61\x63\xdf\xd9\x75\x3d\x33\x64\x72\xc7\xc2\x8f\x2b\x42\x91\x34\x5f\x67\xc3\x5f\x2f\x29\x96\x05\xc7\x47\xe1\xaf\xc8\x8f\x9b\x9b\xb2\x27\x1d\x42\x20\x93\x02\xb6\x21\xd0\xf7\x0b\x81\xbc\x87\x85\x40\xde\x93\x84\x40\x77\x73\xa2\x2a\xcd\xc0\x4c\x00\xb0\x07\xc7\x38\xde\x0e\x63\x9c\xca\xa8\xe4\x7d\xe7\xc3\x83\xd5\xa1\xcf\xaf\x3b\x0b\x71\x3c\x1b\xe2\xbc\x6c\x47\xde\x86\x38\xaf\x3b\xc4\xf1\x6c\x88\xd3\x8e\x4d\x36\xc4\xa9\xe2\xc9\xfe\x86\x38\xde\xbd\x43\x1c\xef\xfe\x21\x8e\xf7\x28\x21\xce\xf0\xa4\xfd\x19\x43\x1b\xe2\x6c\x83\x98\x42\x1c\xaf\x26\xc4\xd9\xfa\xfb\x79\x1d\x9c\x6c\x7b\xc7\xdc\x1b\x4f\x47\x5e\x7f\x18\x9c\xba\x81\xe7\x80\xef\x0d\x1c\x77\xd0\x77\x4e\x47\x27\x3e\xc6\x10\x8c\x4e\xef\x75\xc7\xbc\x89\x68\xc3\xe1\xc9\xef\x75\xc7\xfc\xfa\xbf\xce\x7f\xfe\xcf\x4f\xd7\x7f\xb9\x42\xe7\x6c\x06\x94\xf8\x89\x13\x24\x78\xc4\x82\xf8\xe4\x8f\x79\x98\xf6\xa2\xf9\x16\x40\xcb\xb3\x93\x1d\x99\x5d\x7e\x95\xa6\x33\xfe\xe6\x14\xe5\x3d\xbf\x5d\x0a\x26\x88\x44\x33\x8a\x43\x2e\x78\x24\x91\x98\xf3\x80\x44\xe1\xe1\x92\xc6\xde\xed\x96\x53\xac\xe6\x02\x00\x29\x12\x02\x05\x29\x11\x48\x09\x4c\x11\x4c\xe5\x19\xc2\x88\x81\xbf\xd0\xd2\x72\xa0\x83\x63\x1f\x28\xa8\x83\xd8\x5f\x5d\x62\x22\x10\x9f\xa2\x25\x01\xe1\x43\x80\x00\x0b\x41\xd8\x4c\x1e\xa1\x0b\x1a\x01\xf2\xc5\x4a\x2a\x4c\x25\x0a\xf4\x0c\xb0\x02\xba\x42\x10\x4e\x20\x08\x20\x40\x84\x21\x9f\x02\x16\x19\x14\x5a\xe2\xdb\x3f\xfe\x89\x92\x2d\x88\x70\x6e\xd8\x72\x89\xc5\x82\xc2\x11\xba\x0a\x00\xd3\xd8\x09\x4f\x75\x28\xe2\xbe\x8f\xb5\x70\xc9\x78\x38\x33\x32\x55\x68\x46\x6e\x09\x9b\xfd\x0b\xba\x99\x1b\xca\xe4\x2f\xef\x38\x8c\x3d\x52\xd9\xfd\x48\xe5\x5b\x2c\xe7\xa6\x18\x3f\xeb\x38\xfe\x33\xdc\x81\x8e\xbe\x0c\xc7\x2e\x4b\x20\x9b\x5f\xf6\x68\xa5\xbd\x87\x9e\x83\xd8\x9b\x7b\xe8\x9d\x6d\xcd\xb3\x4f\x51\xbf\xb6\xcb\xe8\xd7\x77\x58\xf0\x5b\xb9\xa8\xb0\x4f\x0d\x69\xe8\x09\xc5\x7e\xe5\x51\x1c\x25\x30\xd3\x06\x58\x3b\xf7\x15\x20\x0c\x38\x9b\x09\x28\x2b\xd3\x35\xfd\x8a\xfc\x78\xee\xa4\x8f\x29\x87\xda\x25\xcf\xbd\xbb\x2c\xf7\xfb\xd7\x7c\xad\xdd\xba\x8b\x05\x36\x95\x72\xd0\xaf\x9a\x43\xeb\x71\xa3\x10\xb0\x8c\x04\x48\xd4\x3f\x45\x7e\x78\x90\x3d\x2b\x1a\x4f\x65\xd3\xe9\x0e\x8f\x06\x71\xb7\x26\xa6\x41\xb2\xf9\x64\x20\xc8\x45\x7e\x78\x14\x93\xd6\xcc\xc3\x54\xf2\x0d\x07\x31\x43\xf0\x55\x01\x0b\x40\x1c\xa0\xbb\x39\xf1\xe7\xc8\xc7\x0c\x4d\x00\x45\x32\x49\xd9\x13\xa6\x67\x27\x21\xa6\x4d\x81\xcd\xd4\x3c\x7b\xe3\x74\x3d\x52\x2e\x36\x03\xd3\x33\xc5\x68\x09\x62\x0a\x3a\x06\x26\xea\x15\x67\xd7\xed\xc5\xfd\x9d\xb3\xc8\x5e\xdc\x7f\xba\xd4\x7a\xc7\x04\x1e\xaa\x49\xad\xef\xc5\xc5\xfd\xf1\x70\xd4\x3a\xa9\x6e\x2f\xee\xf7\x5a\x5f\xdc\x6f\x99\x7d\xee\x72\x71\xff\x81\xb9\xe7\xef\x7b\x71\xff\xc1\x19\x68\x7b\x7b\xdf\x66\xa0\x5f\x8d\xc3\x6c\x33\xd0\x36\x03\x6d\xea\xb0\x19\x68\x43\xdf\x53\x66\xa0\xef\xa1\x29\xef\xaf\x64\xed\x35\xff\x36\xd7\xfc\xeb\x92\x9a\xf6\x9e\x7f\x81\xea\xcb\x33\x2b\xf6\x9e\xbf\xbd\xe7\xff\x78\x8c\xb1\xf7\xfc\x8d\x68\x8f\x79\xcf\x7f\xff\xca\x88\xcf\xf2\xa6\xcb\x53\x5d\xf6\x7f\x58\x8d\xb1\xe1\x46\x7f\x5d\x89\x30\xbd\xed\x5f\xd1\xbb\x8c\x44\xf9\xe4\x5d\x8e\x2e\xf6\x17\xcf\xed\xa1\x80\xd6\xc3\xd9\xcb\x1b\xfc\x36\x1f\x50\x60\x93\x2d\x31\xda\x12\xe3\x7e\x96\x18\xed\x1b\x05\x2d\xd9\x64\x2f\xf0\xbc\x90\x37\x0a\x76\x58\x65\xdc\xa3\x37\x0a\x86\x26\xed\x65\xef\xef\xbc\xa8\x27\x0a\x6c\xf4\xb6\xd7\xef\x14\x3c\x2c\x7a\x6b\x71\x08\xb4\xee\x39\x37\x01\xa6\xbd\x8f\x5a\xc4\x85\xcf\xef\x11\x84\x5d\x1d\x0f\x7d\xa9\xaf\x13\xbc\xea\xe0\xc4\x86\x6f\x36\x7c\x7b\x3d\xe1\x9b\x7d\x7f\xa1\x25\x9b\x6c\xf8\xf6\x42\xde\x5f\xd8\x61\xf8\xb6\x47\xef\x2f\x9c\x9c\xda\x27\xe6\xec\xfb\x0b\xad\xdf\x5f\xc0\xfe\x78\x34\x9e\x8c\xbd\xf1\xd8\x87\xbe\xef\x7b\x53\x67\x12\x0c\x20\x98\x4e\x1c\x1f\x0f\x87\xe3\xe0\x5e\xef\x2f\x34\x11\x6d\x38\x03\xfb\xa4\xef\x2f\x1c\xa6\x51\xf2\x87\xd4\xa1\x68\x3c\x02\x6b\x1f\x61\x78\xe0\x11\xd8\x06\x8e\xb7\x3b\x07\xdb\x4c\xa4\xe1\x30\x6c\xcb\x51\x98\x42\x28\xf8\xfa\x7b\x44\x24\x51\x39\x2f\x34\xf5\x39\xe9\x0a\xf9\x5c\x6f\x66\x2d\xce\x12\x71\x35\x07\xa1\x9d\x7d\x1f\x24\x9a\x0a\x1e\xa2\x75\x24\xff\x7f\xff\xf3\xbf\x12\x4d\x40\xaa\xf4\xec\xe2\x7a\x68\x3e\xa7\x14\x7c\xfd\xbd\x4e\xfe\xfb\x01\x22\x0a\xc9\xb9\x16\xda\x72\xa4\xa0\x61\x75\xdf\xaa\x18\xd1\x84\xa0\x30\xb5\xff\x78\x95\x3d\xe7\x6a\xec\xe8\x76\xce\x75\x2d\x48\xdb\x56\xb2\x62\x4c\xf6\x88\xab\x7d\x64\x61\x03\xf8\x22\x1f\x59\x68\xb4\x20\xcf\x3e\xc9\x6e\x5f\x5a\xd8\x5e\xac\x86\x7f\xf3\x24\x39\xac\xd4\x3a\x83\xfc\xe8\x8f\x1d\xec\xea\x30\xd2\x4b\x7d\xec\x60\xef\xfd\xb0\x8a\x04\xf5\x6b\x98\xf7\xeb\x48\xd2\xda\x6b\xfc\x3b\x67\x91\xbd\xc6\xff\x74\x19\xda\x8e\x79\x20\x54\x93\xa1\xdd\x8b\x6b\xfc\xfd\x0e\xb9\xd9\x17\x74\x8d\xff\x4d\x1e\x53\xff\xf5\xed\xcd\xb7\x37\xff\x1f\x00\x00\xff\xff\x94\xe6\xd3\xdc\xc7\xc7\x00\x00")

func searchresultMockJsonBytes() ([]byte, error) {
	return bindataRead(
		_searchresultMockJson,
		"searchResult.mock.json",
	)
}

func searchresultMockJson() (*asset, error) {
	bytes, err := searchresultMockJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "searchResult.mock.json", size: 51143, mode: os.FileMode(420), modTime: time.Unix(1502693885, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"searchResult.mock.json": searchresultMockJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"searchResult.mock.json": &bintree{searchresultMockJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

