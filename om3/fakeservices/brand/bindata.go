// Code generated by go-bindata.
// sources:
// mocks/service.brand.mock.json
// DO NOT EDIT!

package brand

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _serviceBrandMockJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x95\xdb\x6e\xe3\xb6\x13\xc6\xef\xf3\x14\x03\x01\x09\xb2\xf8\x5b\x07\x4b\x3e\x0a\x08\xfe\x48\x10\xef\x6e\xbb\xc9\x26\x48\xbc\x29\xb0\x45\x11\x8c\xc4\x91\xc4\x98\x22\x05\x92\x8a\x37\x29\xf6\x59\x7a\xd3\x67\xe8\x0b\xe4\xc5\x0a\x4a\xb6\x73\x28\x0a\xf4\x62\x2f\xcd\xf9\x38\xbf\x8f\xdf\x90\xf2\xef\x7b\x00\x1e\x67\x5e\x0a\x9e\x25\x63\x7d\xab\x32\x41\x5a\x49\xf2\x06\xae\x62\xa8\xac\x49\xda\x2b\x12\x74\x8f\x32\x27\x2f\x05\xb7\x03\xc0\x7b\x8f\xe6\x91\x4b\xb4\x5c\x49\x38\xe6\xba\x51\xda\x86\x9f\x38\x33\x07\xef\xb1\xe6\xe2\xc1\x4b\x21\x0a\xc6\x83\x5e\x7b\x45\xdc\x90\x0c\x2f\xd1\x18\x2c\x39\x69\x0a\x4f\x5a\xc3\x25\x19\xe3\xa5\x30\xda\x03\xf8\xde\xc1\xce\x54\xa9\x9e\x01\x9d\xa9\x78\x1a\x6f\x7a\x54\x68\x2a\xe7\x72\x84\x71\x9e\x4d\xc6\x05\x22\x8d\x59\x42\x13\x9c\xc6\xc9\x8c\x18\x4e\x67\xd3\xbc\x60\xe3\xc4\xdb\xe8\xbf\x5c\x9d\x39\x79\x65\x6d\x63\xd2\x30\x34\x16\x2d\xcf\x03\x53\xa9\x26\x28\x34\xca\x55\xd1\x6a\xeb\x63\x6f\x3c\xc8\x55\x1d\x6a\xb2\xc8\x05\x69\x9f\xd7\x58\x92\x09\xe3\x69\x1c\x16\xfc\x1b\xb1\xb0\x0a\xa7\x51\xb8\xdc\x06\x73\x7b\x75\x19\xfc\x7c\xf9\x61\xcb\xe9\x24\x3f\x8a\xb4\x0e\xd3\x35\x67\xb6\x4a\x9f\x71\xbe\x4b\x25\x68\x64\xe9\xed\x72\xfa\x48\x5a\xfd\xe4\xb6\xbe\x09\x6b\x18\xcf\xdf\x84\x35\x8e\xc6\x23\x8a\x47\xd3\x84\x4d\xb2\xd9\x9c\x58\x54\xcc\x27\x71\x3c\x8b\x0a\x4c\x70\x9a\x8d\xa2\x7f\x09\xab\xf7\x15\x34\xf4\x8d\x84\xe9\x2c\x37\x95\xb2\xca\x84\xe3\x64\x34\x9c\x8c\xc2\xbe\xe0\x77\x8b\x7e\xbf\x16\xdc\x35\x54\xfe\x7f\x7d\x34\x8c\x27\xd1\x41\x75\x34\x1d\x47\x07\xd8\x5a\x75\x94\xab\xba\xd1\x64\xcc\x41\x6e\x8e\x2c\x97\x0f\x46\x97\xd9\x96\x3a\xf4\x87\x5b\xea\x73\x6e\x8c\x1a\xa1\x1e\x5c\x72\x2e\x2f\x7f\x4d\x59\x80\x8a\x82\x4a\x19\xfb\x8f\xe0\x86\xf1\x3c\x1c\xfa\xc3\x17\xb1\xed\xae\xef\x6d\x45\x5a\x75\xb2\xe0\xae\x29\x77\xc4\x89\x3f\xff\x01\xc8\x89\x3f\xff\x0f\xcc\xdd\xbc\x90\x31\xee\xde\x09\x8a\x73\x62\x1c\xbd\x14\x7e\xdd\x03\xf8\xad\xab\xad\xb9\xad\x4e\x3b\xc6\x65\x3f\xd0\x02\x85\xa1\xae\xc4\xa8\xc0\x56\xbc\x7a\x7b\x49\x57\x10\x68\xec\x97\x86\xa1\x75\x4b\x5e\x1c\x0d\xc7\x7e\x34\xf5\xe3\xd9\x72\x38\x4e\xa3\x24\x8d\x92\xff\x45\x51\xd4\xcf\xd6\x5b\x72\x2b\x3a\xd9\xf1\xc5\x02\x96\x64\x2c\x2c\x5f\xbf\xf0\xeb\x4a\x69\xbb\x53\xa9\x02\xae\xd7\xdc\x3e\x92\x16\x28\x59\xaf\xb0\x84\x86\xb4\xab\x2e\x2f\x4e\xce\x16\x57\x17\x9f\x17\xc0\x8d\x05\x2e\x81\x91\x86\xeb\xbc\x5a\x13\x7f\x84\x56\x32\xe0\x35\x1c\xb7\xc6\x6d\x05\xc6\x09\x32\x5a\xa1\x94\xee\xbb\x42\x5b\x59\xbf\x41\xad\x94\x40\xb6\x71\xc0\xa5\xd5\x8a\xb5\xb9\x8b\xc8\x51\x2e\x32\x78\x6c\xe1\x17\xe2\x95\xc4\xbc\xb2\x24\x07\x70\x61\x2c\x69\x09\xca\xf1\x6e\x50\x90\xb4\x5c\x1a\xbf\x43\x9e\xb7\xd6\x92\xb6\x58\x06\x70\xda\xea\xbc\x32\xf6\xe9\xaf\xcc\x89\xaf\x39\x41\x2b\x0d\x69\x82\x52\xab\xa7\x3f\xc8\x59\x5b\x63\x25\x00\x25\xec\x4e\xe2\x3f\xbb\x91\x56\x3f\xfd\xd9\xd6\x24\xbb\xbe\x05\x97\x8c\xfa\x2e\x0c\x0d\x34\x68\x0c\x49\x46\xf0\x81\x4c\x5e\x91\x5c\x39\x8f\x77\xc4\xa8\x86\x63\x29\xd0\x98\xc0\xdb\x0c\xcd\xe4\x9a\x37\xdb\xb3\x3c\x9f\xfa\x9c\x8b\xbc\x32\x3b\x18\xd4\xdc\xc2\x47\x25\x79\xb9\x39\x06\x4a\x46\xc2\xff\xac\xda\x12\x2d\x1c\x1e\xce\xf7\xdf\xc1\xd7\xd6\xa2\x25\x99\xc2\xd7\x36\x5f\x91\x1e\xc0\x8d\x12\xa2\x76\x7d\x9a\x56\xdc\xbb\x85\x4f\xb8\x42\x95\x75\x09\x6c\x7e\xd4\xce\xe7\xa0\xef\x0c\x87\x49\x10\xc1\xfe\xbb\x01\x9c\x74\x12\x4d\x5c\x16\x64\xed\x60\x43\x93\x70\x38\x0c\x26\x9d\x60\x51\xb7\xa2\x44\xab\x34\x5c\xab\x3b\xf4\xcf\x28\xe7\xb6\xe2\x72\x00\x0b\xbe\x12\xa8\x07\x70\xac\x55\x8d\x70\x83\x92\x0b\xc1\x65\xd0\xc3\x52\x88\x0f\x67\xfb\x50\xbb\xa8\x8c\x25\xb9\x0d\x61\x45\x0f\x6b\xa5\x99\xd9\x24\xf0\x6a\xda\x42\xe5\x28\xe8\xe5\xa5\x8e\x37\x97\x5a\x96\x6d\xff\x04\x3c\x46\xb7\xa7\x8b\x5e\xde\x6a\xf1\xf2\xcb\x54\x08\xac\xb9\x2c\x55\xc0\xe8\xde\x17\xe8\xae\x56\x80\x2b\x11\xa8\x3a\x09\x72\xa1\x5a\x16\x32\x0a\x33\x8d\x92\x85\x6f\xfe\xce\xf6\xbe\xef\xfd\x1d\x00\x00\xff\xff\xc3\x13\xcb\x6e\xec\x06\x00\x00")

func serviceBrandMockJsonBytes() ([]byte, error) {
	return bindataRead(
		_serviceBrandMockJson,
		"service.brand.mock.json",
	)
}

func serviceBrandMockJson() (*asset, error) {
	bytes, err := serviceBrandMockJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service.brand.mock.json", size: 1772, mode: os.FileMode(420), modTime: time.Unix(1502693885, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"service.brand.mock.json": serviceBrandMockJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"service.brand.mock.json": &bintree{serviceBrandMockJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
