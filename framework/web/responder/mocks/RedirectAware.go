// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"

import web "go.aoe.com/flamingo/framework/web"

// RedirectAware is an autogenerated mock type for the RedirectAware type
type RedirectAware struct {
	mock.Mock
}

// Redirect provides a mock function with given fields: name, args
func (_m *RedirectAware) Redirect(name string, args map[string]string) web.Response {
	ret := _m.Called(name, args)

	var r0 web.Response
	if rf, ok := ret.Get(0).(func(string, map[string]string) web.Response); ok {
		r0 = rf(name, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(web.Response)
		}
	}

	return r0
}

// RedirectPermanent provides a mock function with given fields: name, args
func (_m *RedirectAware) RedirectPermanent(name string, args map[string]string) web.Response {
	ret := _m.Called(name, args)

	var r0 web.Response
	if rf, ok := ret.Get(0).(func(string, map[string]string) web.Response); ok {
		r0 = rf(name, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(web.Response)
		}
	}

	return r0
}

// RedirectPermanentURL provides a mock function with given fields: url
func (_m *RedirectAware) RedirectPermanentURL(url string) web.Response {
	ret := _m.Called(url)

	var r0 web.Response
	if rf, ok := ret.Get(0).(func(string) web.Response); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(web.Response)
		}
	}

	return r0
}

// RedirectURL provides a mock function with given fields: url
func (_m *RedirectAware) RedirectURL(url string) web.Response {
	ret := _m.Called(url)

	var r0 web.Response
	if rf, ok := ret.Get(0).(func(string) web.Response); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(web.Response)
		}
	}

	return r0
}
